security:
    # Activation du gestionnaire d'authentification
    enable_authenticator_manager: true

    # Configuration du hashage de mot de passe
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # Configuration des fournisseurs d'utilisateurs
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User # Votre entité User
                property: email         # Champ utilisé pour l'authentification

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            form_login:
                login_path: app_login       # Chemin vers la page de connexion
                check_path: app_login       # Chemin pour vérifier les identifiants
                username_parameter: email   # Nom du champ pour l'email
                password_parameter: password
            logout:
                path: app_logout            # Chemin de déconnexion
                target: app_login            # Redirection après 
            access_denied_url: app_login

    access_control:
        # - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }













# security:
#     # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
#     password_hashers:
#         Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
#     # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
#     providers:
#         users_in_memory: { memory: null }
#     firewalls:
#         dev:
#             pattern: ^/(_(profiler|wdt)|css|images|js)/
#             security: false
#         main:
#             lazy: true
#             provider: users_in_memory

#             # activate different ways to authenticate
#             # https://symfony.com/doc/current/security.html#the-firewall

#             # https://symfony.com/doc/current/security/impersonating_user.html
#             # switch_user: true

#     # Easy way to control access for large sections of your site
#     # Note: Only the *first* access control that matches will be used
#     access_control:
#         # - { path: ^/admin, roles: ROLE_ADMIN }
#         # - { path: ^/profile, roles: ROLE_USER }

# when@test:
#     security:
#         password_hashers:
#             # By default, password hashers are resource intensive and take time. This is
#             # important to generate secure password hashes. In tests however, secure hashes
#             # are not important, waste resources and increase test times. The following
#             # reduces the work factor to the lowest possible values.
#             Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#                 algorithm: auto
#                 cost: 4 # Lowest possible value for bcrypt
#                 time_cost: 3 # Lowest possible value for argon
#                 memory_cost: 10 # Lowest possible value for argon
